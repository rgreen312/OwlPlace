{"version":3,"sources":["components/ScrollToTop.tsx","colorPicker/components/colorPicker.tsx","canvas/components/Canvas.tsx","websocket/selectors.ts","canvas/containers/CanvasContainer.tsx","canvas/containers/CanvasPageContainer.tsx","about/components/About.tsx","header/components/Header.tsx","login/actionTypes.ts","login/actions.ts","login/selectors.ts","header/containers/HeaderContainer.tsx","footer/components/Footer.tsx","error/components/Error.tsx","RoutingContainer.tsx","websocket/actionTypes.ts","websocket/actions.ts","App.tsx","constants.ts","createReducer.ts","login/reducers.ts","websocket/reducers.ts","index.tsx"],"names":["withRouter","children","pathname","location","useEffect","window","scrollTo","ColorPicker","onComplete","onCancel","useState","r","g","b","color","setColor","onChange","c","rgb","onClick","Canvas","receivedError","to","console","log","state","websocket","connect","CanvasPageContainer","CanvasContainer","About","className","Header","onLogin","isLoggedIn","name","onLogout","onGoogleScriptLoad","loginButton","menu","Item","dropdownMenu","key","overlay","style","border","padding","type","fontSize","verticalAlign","title","subTitle","tags","extra","LoginStart","LoginSuccess","LoginError","SignOut","loginStart","ActionTypes","loginSuccess","id","email","payload","getIsLoggedIn","login","getUserName","undefined","mapDispatchToProps","dispatch","a","googleAPILoaded","Promise","resolve","gapi","load","auth2","init","client_id","getAuthInstance","signIn","googleUser","currentUser","get","profile","getBasicProfile","getName","getId","getEmail","signOut","Footer","Error","RoutingContainer","exact","path","component","AboutPage","ErrorPage","StartConnect","ConnectSuccess","ConnectError","CloseConnection","closeConnection","App","this","props","checkLogin","openConnection","React","Component","timeout","setTimeout","race","then","isSignedIn","socket","WebSocket","onopen","send","JSON","stringify","message","connectSuccess","onclose","event","onerror","error","connectError","onmessage","data","createReducer","initialState","handlers","action","handler","combineReducers","isConnected","rootReducer","loginReducers","webSocketReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.384c409f.chunk.js","sourcesContent":["import { FC, useEffect } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n// @ts-ignore - TODO: figure out why typescript doesn't like this\nconst ScrollToTop: FC<RouteComponentProps> = ({\n  children,\n  location: { pathname }\n}) => {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return children || null;\n};\n\nexport default withRouter(ScrollToTop);\n","import React, { FC, useState } from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Button } from \"antd\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ninterface RGBColor {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n}\r\n\r\ninterface Props {\r\n  onComplete: (color: RGBColor) => void;\r\n  onCancel: () => void;\r\n}\r\n// http://casesandberg.github.io/react-color/\r\n\r\nconst ColorPicker: FC<Props> = ({ onComplete, onCancel }) => {\r\n  const [color, setColor] = useState({ r: 0, g: 0, b: 0 })\r\n  const complete = () => onComplete(color);\r\n\r\n  return ( \r\n    <div>\r\n      <SketchPicker \r\n        color={color}\r\n        onChange={(c) => setColor({ r: c.rgb.r, b: c.rgb.b, g: c.rgb.g })}     \r\n      />\r\n      <Button onClick={complete}>\r\n        Okay\r\n      </Button>\r\n      <Button onClick={onCancel}>\r\n        Cancel\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default ColorPicker;\r\n","import React, { FC } from 'react';\nimport ColorPicker from '../../colorPicker/components/colorPicker';\nimport { Redirect } from 'react-router-dom';\n\ninterface Props {\n  receivedError: boolean; \n}\n\nconst Canvas: FC<Props> = ({receivedError}) => {\n  return (\n    receivedError ? <Redirect to='/error'/> :\n    <div>\n      <div>\n        <ColorPicker\n          onCancel={() => console.log('canceled')}\n          onComplete={(c) => console.log('color selected: ', c)}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Canvas;\n","import { State } from '../types';\n\nexport const getWebSocket = (state: State): WebSocket | undefined => state.websocket.socket || undefined;\nexport const getIsConnected = (state: State): boolean => state.websocket.isConnected;\nexport const receivedError = (state: State): boolean => state.websocket.receivedError;\n","import { connect } from 'react-redux';\nimport Canvas from '../components/Canvas';\nimport { receivedError } from '../../websocket/selectors';\n\ninterface DispatchProps {\n\n}\n\nconst mapDispatchToProps: DispatchProps = {\n};\n\ninterface StateProps {\n  receivedError: boolean; \n}\nconst mapStateToProps  = (state): StateProps => ({\n  receivedError: receivedError(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Canvas);\n","import React, { FC } from 'react';\nimport CanvasContainer from './CanvasContainer';\n\n\n\nconst CanvasPageContainer: FC = () => (\n  <CanvasContainer />\n);\n\nexport default CanvasPageContainer;\n","import React, { FC } from 'react';\n\nconst About: FC = () => (\n  <div className='about-page'>\n    Update the canvas one pixel at a time...\n  </div>\n);\n\nexport default About;\n","import React, { FC } from \"react\";\nimport { PageHeader, Button, Menu, Dropdown, Icon, Tag } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  isLoggedIn: boolean;\n  name?: string;\n  onLogin: () => void;\n  onLogout: () => void;\n}\n\n// TODO(Ryan): Should add a isLoggedIn prop, if they are then display user's name\nconst Header: FC<Props> = ({ onLogin, isLoggedIn, name, onLogout }) => {\n  //@ts-ignore\n  window.onGoogleScriptLoad = () => {\n    console.log(\"The google script has really loaded, cool!\");\n  };\n\n  const loginButton = isLoggedIn ? (\n    <>Hi, {name}</>\n  ) : (\n    <Button className=\"login-button\" onClick={onLogin}>\n      Login\n    </Button>\n  );\n\n  // TODO(ryan): add sign out functionality\n  const menu = (\n    <Menu>\n      <Menu.Item>\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to=\"/pickColor\">PickColor</Link>\n      </Menu.Item>\n      {isLoggedIn && <Menu.Item onClick={onLogout}>Sign Out</Menu.Item>}\n    </Menu>\n  );\n\n  const dropdownMenu = (\n    <Dropdown key=\"more\" overlay={menu}>\n      <Button\n        style={{\n          border: \"none\",\n          padding: 0\n        }}\n      >\n        <Icon\n          type=\"ellipsis\"\n          style={{\n            fontSize: 20,\n            verticalAlign: \"top\"\n          }}\n        />\n      </Button>\n    </Dropdown>\n  );\n\n  return (\n    <PageHeader\n      title=\"OwlPlace\"\n      subTitle=\"change the canvas one pixel at a time\"\n      tags={<Tag color=\"green\">COMP 413</Tag>}\n      extra={[loginButton, dropdownMenu]}\n    />\n  );\n};\n\nexport default Header;\n","export const LoginStart = 'login/LOGIN_START';\nexport const LoginSuccess = 'login/LOGIN_SUCCESS';\nexport const LoginError = 'login/LOGIN_ERROR';\nexport const SignOut = 'login/SIGN_OUT';\n","import * as ActionTypes from './actionTypes';\n\nconst loginStart = () => ({\n  type: ActionTypes.LoginStart\n});\nexport type LoginStart = ReturnType<typeof loginStart>;\n\nconst loginSuccess = (name: string, id: string, email: string) => ({\n  type: ActionTypes.LoginSuccess,\n  payload: {\n    name,\n    id,\n    email,\n  }\n});\nexport type LoginSuccess = ReturnType<typeof loginSuccess>;\n\nconst loginError = () => ({\n  type: ActionTypes.LoginError\n});\nexport type LoginError = ReturnType<typeof loginError>;\n\nexport const login = () => async dispatch => {\n  dispatch(loginStart());\n\n  /**\n   * The Sign-In client object.\n   */\n  let auth2: any;\n\n  const googleAPILoaded: Promise<void> = new Promise(resolve => {\n    gapi.load('auth2', () => {\n      /**\n       * Retrieve the singleton for the GoogleAuth library and set up the\n       * client.\n       */\n      auth2 = gapi.auth2.init({\n          client_id: '634069824484-ch6gklc2fevg9852aohe6sv2ctq7icbk.apps.googleusercontent.com'\n      });\n      resolve();\n    });\n  });\n\n  await googleAPILoaded;\n\n  await gapi.auth2.getAuthInstance().signIn();\n  const googleUser = gapi.auth2.getAuthInstance().currentUser.get();\n  const profile = googleUser.getBasicProfile();\n\n  dispatch(loginSuccess(profile.getName(), profile.getId(), profile.getEmail()));\n}\n\nexport const checkLogin = () => async dispatch => {\n  dispatch(loginStart());\n\n  /**\n  * The Sign-In client object.\n  */\n let auth2: any;\n\n  return new Promise(resolve => {\n    const timeout = setTimeout(() => Promise.resolve(), 3000);\n    const loadApi = () => new Promise(resolve => {\n      while (!window.gapi) {} \n      resolve()\n    });\n\n    Promise.race([timeout, loadApi]);\n    if (!window.gapi) {\n      return;\n    }\n\n    gapi.load('auth2', () => {\n     /**\n      * Retrieve the singleton for the GoogleAuth library and set up the\n      * client.\n      */\n     gapi.auth2.init({\n         client_id: '634069824484-ch6gklc2fevg9852aohe6sv2ctq7icbk.apps.googleusercontent.com'\n     }).then( function() {\n         // Sign in the user if they are currently signed in.\n         auth2 = gapi.auth2.getAuthInstance(); \n         if (auth2.isSignedIn.get()) {\n           const googleUser = gapi.auth2.getAuthInstance().currentUser.get();\n           const profile = googleUser.getBasicProfile();\n           dispatch(loginSuccess(profile.getName(), profile.getName(), profile.getEmail())); \n         }\n       }\n     );\n\n      resolve();\n   });\n });\n}\n\nconst signOutAction = () => ({\n  type: ActionTypes.SignOut\n});\nexport type SignOut = ReturnType<typeof signOutAction>;\n\nexport const signOut = () => async dispatch => {\n  const auth2 = gapi.auth2.getAuthInstance();\n  await auth2.signOut();\n  dispatch(signOutAction());\n}\n","import { State } from '../types';\n\nexport const getIsLoggedIn = (state: State): boolean => state.login.isLoggedIn;\nexport const getUserName = (state: State): string | undefined => state.login.name || undefined;\nexport const getUserId = (state: State): string | undefined => state.login.userId || undefined;\nexport const getUserEmail = (state: State): string | undefined => state.login.email || undefined;\n","import { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { login, signOut } from '../../login/actions';\nimport { getIsLoggedIn, getUserName } from '../../login/selectors';\n\ninterface DispatchProps {\n  onLogin: () => void;\n  onLogout: () => void;\n}\n\ninterface StateProps {\n  isLoggedIn: boolean;\n  name?: string;\n}\n\nconst mapDispatchToProps: DispatchProps = {\n  onLogin: login,\n  onLogout: signOut,\n}\n\nconst mapStateToProps  = (state): StateProps => ({\n  isLoggedIn: getIsLoggedIn(state),\n  name: getUserName(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React from \"react\";\nimport \"./Footer.scss\";\n\nconst Footer: React.FC = () => {\n  return (\n    <div>\n      <footer>Made with &hearts; by COMP 413 @ Rice</footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { FC } from 'react';\n\nconst Error: FC = () => (\n  <div className='error-page'>\n    There was an error.\n  </div>\n);\n\nexport default Error;\n","import React, { FC } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport ScrollToTop from './components/ScrollToTop';\nimport CanvasPageContainer from './canvas/containers/CanvasPageContainer';\nimport AboutPage from './about/components/About';\nimport Header from './header/containers/HeaderContainer';\nimport Footer from './footer/components/Footer';\nimport ErrorPage from './error/components/Error';\n\nconst RoutingContainer: FC = () => (\n  <Router>\n    <ScrollToTop>\n      <Header />\n      <Route exact path='/' component={CanvasPageContainer} />\n      <Route path='/about' component={AboutPage} />\n      <Route path='/error' component={ErrorPage} />\n      <Footer />\n    </ScrollToTop>\n  </Router>\n);\n\nexport default RoutingContainer;\n","export const StartConnect = 'websocket/START_CONNECT';\nexport const ConnectSuccess = 'websocket/CONNECT_SUCCESS';\nexport const ConnectError = 'websocket/CONNECT_ERROR';\nexport const CloseConnection = 'websocket/CLOSE_CONNNECTION';\n","import { HOSTNAME } from '../constants';\nimport * as ActionTypes from './actionTypes';\nimport { getWebSocket } from './selectors';\n\nconst startConnect = () => ({\n  type: ActionTypes.StartConnect\n});\nexport type StartConnect =  ReturnType<typeof startConnect>;\n\nconst connectError = (error: string) => ({\n  type: ActionTypes.ConnectError,\n  payload: {\n    error\n  }\n});\nexport type ConnectError =  ReturnType<typeof connectError>;\n\nconst closeConnection = () => ({\n  type: ActionTypes.CloseConnection,\n});\nexport type CloseConnection =  ReturnType<typeof closeConnection>;\n\nconst connectSuccess = (socket: WebSocket) => ({\n  type: ActionTypes.ConnectSuccess,\n  payload: {\n    socket\n  }\n});\nexport type ConnectSuccess = ReturnType<typeof connectSuccess>;\n\nexport const openWebSocket = () => dispatch => {\n  dispatch(startConnect());\n\n  const socket = new WebSocket(`ws://${HOSTNAME}/ws`);\n    // open message is 0\n    socket.onopen = () => {\n      socket.send(\n        JSON.stringify({\n          type: 0,\n          message: \"Hi From the Client! The websocket just opened\"\n        })\n      );\n    dispatch(connectSuccess(socket));\n  };\n\n  // close message is 9\n  socket.onclose = event => {\n    dispatch(closeConnection());\n  };\n\n  socket.onerror = error => {\n    dispatch(connectError(error.type));\n  };\n\n  socket.onmessage = event => {\n    const { data } = event;\n    // TODO (Ryan): figure out the best way to handle this... probably need to write some middlewear\n    console.log(\"Recieved a message from the server, message: \" + data);\n  };\n}\n\nexport const closeWebSocket = () => (dispatch, getState) => {\n  const socket = getWebSocket(getState());\n  if (socket) {\n    socket.send(\n      JSON.stringify({\n        type: 9,\n        message: \"Client Closed!\"\n      })\n    );\n  }\n  dispatch(closeConnection());\n}\n\n// TODO (ryan): create action send different message types\n","import React from \"react\";\nimport \"./App.scss\";\nimport RoutingContainer from './RoutingContainer';\nimport { connect } from 'react-redux';\nimport { checkLogin } from './login/actions';\nimport { openWebSocket } from './websocket/actions';\n\n// // updateMessage is type 1\n// const updateMessage = (\n//   id: string,\n//   x: number,\n//   y: number,\n//   r: number,\n//   g: number,\n//   b: number\n// ) => {\n//   return JSON.stringify({\n//     type: 1,\n//     userId: id,\n//     x: x,\n//     y: y,\n//     r: r,\n//     g: g,\n//     b: b\n//   });\n// };\n// const onClickP1 = (\n//   id: string,\n//   x: number,\n//   y: number,\n//   r: number,\n//   g: number,\n//   b: number\n// ) => {\n//   console.log(\"Sending update of Pixel 1\");\n//   socket.send(updateMessage(id, x, y, r, g, b));\n\n//   return true;\n// }\n\ninterface Props {\n  checkLogin: () => void;\n  openConnection: () => void;\n}\n\nclass App extends React.Component<Props> {\n\n  componentDidMount() {\n    this.props.checkLogin();\n    this.props.openConnection();\n  }\n  \n  render() {\n    return (\n      // <div>\n      //   <div className=\"top-nav-bar\">\n      //     <button className=\"login-btn\" onClick={onSignIn}>\n      //       <p className=\"login-text\">login</p>\n      //     </button>\n      //   </div>\n      //   <div className=\"main-wrapper\">\n      //     <h1>owlplaces</h1>\n      //     <h2>change the canvas one pixel at a time</h2>\n      //     <p>Click \"Pixel 1\" to send an update message to the server!\n      //       </p>\n      //       <button onClick = {() => onClickP1(\"user1\", 10, 400, 255, 255, 255)} id=\"p1\"> Pixel 1 </button>\n      //       {/* <button onClick= {onClickClose} id=\"close\">Close</button> */}\n      //   </div>\n      // </div>\n      <RoutingContainer />\n    );\n  }\n};\n\nconst mapDispatchToProps: Props = {\n  checkLogin: checkLogin,\n  openConnection: openWebSocket\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(App);\n","export const HOSTNAME = '127.0.0.1:3010';\n","// TODO (ryan): add stricter typing to handlers\nexport function createReducer<T>(\n  initialState: T,\n  handlers\n) {\n  return function(state: T = initialState, action): T {\n    const handler = handlers[action && action.type];\n    if (!handler) {\n      return state;\n    }\n    return handler(state, action);\n  };\n}\n","import { createReducer } from '../createReducer';\nimport * as ActionTypes from './actionTypes';\nimport { combineReducers } from 'redux';\nimport { LoginSuccess } from './actions';\n\n\nexport interface State {\n  isLoggedIn: boolean;\n  name: string | null;\n  email: string | null;\n  userId: string | null;\n}\n\nconst isLoggedIn = createReducer<State['isLoggedIn']>(false, {\n  [ActionTypes.LoginStart]: () =>  false,\n  [ActionTypes.LoginError]: () =>  false,\n  [ActionTypes.SignOut]: () => false,\n  [ActionTypes.LoginSuccess]: () => true,\n});\n\nconst name = createReducer<State['name']>(null, {\n  [ActionTypes.LoginStart]: () =>  null,\n  [ActionTypes.LoginError]: () =>  null,\n  [ActionTypes.SignOut]: () => null,\n  [ActionTypes.LoginSuccess]: (state, action: LoginSuccess) => action.payload.name,\n});\n\nconst email = createReducer<State['name']>(null, {\n  [ActionTypes.LoginStart]: () =>  null,\n  [ActionTypes.LoginError]: () =>  null,\n  [ActionTypes.SignOut]: () => null,\n  [ActionTypes.LoginSuccess]: (state, action: LoginSuccess) => action.payload.email,\n});\n\nconst id = createReducer<State['userId']>(null, {\n  [ActionTypes.LoginStart]: () =>  null,\n  [ActionTypes.LoginError]: () =>  null,\n  [ActionTypes.SignOut]: () => null,\n  [ActionTypes.LoginSuccess]: (state, action: LoginSuccess) => action.payload.id,\n});\n\n\n\nexport default combineReducers({\n  isLoggedIn,\n  name,\n  email,\n  id,\n});\n","import { createReducer } from '../createReducer';\nimport * as ActionTypes from './actionTypes';\nimport { ConnectSuccess } from './actions';\nimport { combineReducers } from 'redux';\n \nexport interface State {\n  socket: WebSocket | null;\n  isConnected: boolean;\n  receivedError: boolean; \n}\n\nconst socket = createReducer<State['socket']>(null, {\n  [ActionTypes.StartConnect]: () => null,\n  [ActionTypes.ConnectError]: () => null,\n  [ActionTypes.CloseConnection]: () => null,\n  [ActionTypes.ConnectSuccess]: (state, action: ConnectSuccess) => action.payload.socket,\n});\n\nconst isConnected = createReducer<State['isConnected']>(false, {\n  [ActionTypes.StartConnect]: () => false,\n  [ActionTypes.ConnectError]: () => false,\n  [ActionTypes.CloseConnection]: () => false,\n  [ActionTypes.ConnectSuccess]: () => true,\n});\n\nconst receivedError = createReducer<State['receivedError']>(false, {\n  [ActionTypes.StartConnect]: () => false,\n  [ActionTypes.ConnectError]: () => true,\n  [ActionTypes.CloseConnection]: () => false,\n  [ActionTypes.ConnectSuccess]: () => false,\n}); \n\nexport default combineReducers({\n  socket,\n  isConnected,\n  receivedError\n})\n","import React from 'react';\nimport { render } from 'react-dom'\nimport './index.scss';\nimport App from './App';\nimport { combineReducers, createStore, applyMiddleware, compose } from 'redux';\n// import canvasReducers from './canvas/reducers';\nimport loginReducers from './login/reducers';\nimport webSocketReducers from './websocket/reducers';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n  // canvas: canvasReducers,\n  login: loginReducers,\n  websocket: webSocketReducers,\n});\n\n// @ts-ignore - redux devtools doesn't have type definitions\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}