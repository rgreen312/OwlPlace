{"version":3,"sources":["components/ScrollToTop.tsx","canvas/components/Canvas.tsx","canvas/containers/CanvasContainer.tsx","canvas/containers/CanvasPageContainer.tsx","about/components/About.tsx","header/components/Header.tsx","login/actionTypes.ts","login/actions.ts","login/selectors.ts","header/containers/HeaderContainer.tsx","footer/components/Footer.tsx","colorPicker/colorPicker.tsx","RoutingContainer.tsx","App.tsx","websocket/actions.ts","websocket/actionTypes.ts","constants.ts","createReducer.ts","login/reducers.ts","websocket/reducers.ts","index.tsx"],"names":["withRouter","children","pathname","location","useEffect","window","scrollTo","Canvas","connect","CanvasPageContainer","CanvasContainer","About","className","Header","onLogin","isLoggedIn","name","onLogout","onGoogleScriptLoad","console","log","loginButton","onClick","menu","Item","to","dropdownMenu","key","overlay","style","border","padding","type","fontSize","verticalAlign","title","subTitle","tags","color","extra","LoginStart","LoginSuccess","LoginError","SignOut","loginStart","ActionTypes","loginSuccess","id","email","payload","getIsLoggedIn","state","login","getUserName","undefined","mapDispatchToProps","dispatch","a","googleAPILoaded","Promise","resolve","gapi","load","auth2","init","client_id","getAuthInstance","signIn","googleUser","currentUser","get","profile","getBasicProfile","getName","getId","getEmail","signOut","Footer","ColorPicker","RoutingContainer","exact","path","component","AboutPage","App","this","props","checkLogin","openConnection","React","Component","timeout","setTimeout","race","then","isSignedIn","socket","WebSocket","onopen","send","JSON","stringify","message","connectSuccess","onclose","event","onerror","error","connectError","onmessage","data","createReducer","initialState","handlers","action","handler","combineReducers","isConnected","rootReducer","loginReducers","websocket","webSocketReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","render","document","getElementById"],"mappings":"uUAeeA,cAX8B,SAAC,GAGvC,IAFLC,EAEI,EAFJA,SACYC,EACR,EADJC,SAAYD,SAMZ,OAJAE,oBAAU,WACRC,OAAOC,SAAS,EAAG,IAClB,CAACJ,IAEGD,GAAY,O,QCINM,EAVW,WACxB,OACE,6BACE,6BACE,oCCAOC,cACb,KAJwC,GAG3BA,CAGbD,GCJaE,EAJiB,kBAC9B,kBAACC,EAAD,OCEaC,EANG,kBAChB,yBAAKC,UAAU,cAAf,6C,oDC8DaC,EArDW,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAEtDZ,OAAOa,mBAAqB,WAC1BC,QAAQC,IAAI,+CAGd,IAAMC,EAAcN,EAClB,2CAAOC,GAEP,kBAAC,IAAD,CAAQJ,UAAU,eAAeU,QAASR,GAA1C,SAMIS,EACJ,kBAAC,IAAD,KACE,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAEDV,GAAc,kBAAC,IAAKS,KAAN,CAAWF,QAASL,GAApB,aAIbS,EACJ,kBAAC,IAAD,CAAUC,IAAI,OAAOC,QAASL,GAC5B,kBAAC,IAAD,CACEM,MAAO,CACLC,OAAQ,OACRC,QAAS,IAGX,kBAAC,IAAD,CACEC,KAAK,WACLH,MAAO,CACLI,SAAU,GACVC,cAAe,WAOzB,OACE,kBAAC,IAAD,CACEC,MAAM,WACNC,SAAS,wCACTC,KAAM,kBAAC,IAAD,CAAKC,MAAM,SAAX,YACNC,MAAO,CAAClB,EAAaK,M,yBC5Ddc,EAAa,oBACbC,EAAe,sBACfC,EAAa,oBACbC,EAAU,iBCDjBC,EAAa,iBAAO,CACxBZ,KAAMa,IAIFC,EAAe,SAAC9B,EAAc+B,EAAYC,GAA3B,MAA8C,CACjEhB,KAAMa,EACNI,QAAS,CACPjC,OACA+B,KACAC,WCVSE,EAAgB,SAACC,GAAD,OAA2BA,EAAMC,MAAMrC,YACvDsC,EAAc,SAACF,GAAD,OAAsCA,EAAMC,MAAMpC,WAAQsC,GCY/EC,EAAoC,CACxCzC,QFMmB,wDAAM,WAAM0C,GAAN,mBAAAC,EAAA,4DACzBD,EAASZ,KAOHc,EAAiC,IAAIC,QAAQ,SAAAC,GACjDC,KAAKC,KAAK,QAAS,WAKTD,KAAKE,MAAMC,KAAK,CACpBC,UAAW,6EAEfL,QAjBqB,SAqBnBF,EArBmB,uBAuBnBG,KAAKE,MAAMG,kBAAkBC,SAvBV,OAwBnBC,EAAaP,KAAKE,MAAMG,kBAAkBG,YAAYC,MACtDC,EAAUH,EAAWI,kBAE3BhB,EAASV,EAAayB,EAAQE,UAAWF,EAAQG,QAASH,EAAQI,aA3BzC,yCAAN,uDELnB1D,SFmFqB,wDAAM,WAAMuC,GAAN,eAAAC,EAAA,4DACrBM,EAAQF,KAAKE,MAAMG,kBADE,SAErBH,EAAMa,UAFe,OAG3BpB,EAR2B,CAC3BxB,KAAMa,IAIqB,yCAAN,wDE3ERrC,cALU,SAAC2C,GAAD,MAAwB,CAC/CpC,WAAYmC,EAAcC,GAC1BnC,KAAMqC,EAAYF,KAKlBI,EAFa/C,CAGbK,GCjBagE,G,OARU,WACvB,OACE,6BACE,0E,kBCISC,EAJgB,SAAC,GAC9B,OADsC,eAC/B,kBAAC,eAAD,OCcMC,EAZc,kBAC3B,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzE,IACjC,kBAAC,IAAD,CAAOwE,KAAK,SAASC,UAAWC,IAChC,kBAAC,EAAD,SC6BAC,E,4LAGFC,KAAKC,MAAMC,aACXF,KAAKC,MAAME,mB,+BAIX,OAgBE,kBAAC,EAAD,U,GAxBYC,IAAMC,WA6BlBnC,EAA4B,CAChCgC,WNvBwB,wDAAM,WAAM/B,GAAN,SAAAC,EAAA,4DAC9BD,EAASZ,KADqB,kBAQvB,IAAIe,QAAQ,SAAAC,GACjB,IAAM+B,EAAUC,WAAW,kBAAMjC,QAAQC,WAAW,KAMpDD,QAAQkC,KAAK,CAACF,EALE,kBAAM,IAAIhC,QAAQ,SAAAC,GAChC,MAAQvD,OAAOwD,OACfD,SAIGvD,OAAOwD,MAIZA,KAAKC,KAAK,QAAS,WAKlBD,KAAKE,MAAMC,KAAK,CACZC,UAAW,6EACZ6B,KAAM,WAGL,GADQjC,KAAKE,MAAMG,kBACT6B,WAAWzB,MAAO,CAC1B,IACMC,EADaV,KAAKE,MAAMG,kBAAkBG,YAAYC,MACjCE,kBAC3BhB,EAASV,EAAayB,EAAQE,UAAWF,EAAQE,UAAWF,EAAQI,gBAKzEf,SAtC0B,yCAAN,uDMwBxB4B,eC9C2B,kBAAM,SAAAhC,GACjCA,EA3B0B,CAC1BxB,KCL0B,4BDiC1B,IAAMgE,EAAS,IAAIC,UAAJ,eEjCO,iBFiCP,QAEbD,EAAOE,OAAS,WACdF,EAAOG,KACLC,KAAKC,UAAU,CACbrE,KAAM,EACNsE,QAAS,mDAGf9C,EApBmB,SAACwC,GAAD,MAAwB,CAC7ChE,KCtB4B,4BDuB5BiB,QAAS,CACP+C,WAiBSO,CAAeP,KAI1BA,EAAOQ,QAAU,SAAAC,GACfjD,EA9B2B,CAC7BxB,KCf6B,iCD+C7BgE,EAAOU,QAAU,SAAAC,GACfnD,EA1CiB,SAACmD,GAAD,MAAoB,CACvC3E,KCR0B,0BDS1BiB,QAAS,CACP0D,UAuCSC,CAAaD,EAAM3E,QAG9BgE,EAAOa,UAAY,SAAAJ,GAAU,IACnBK,EAASL,EAATK,KAER3F,QAAQC,IAAI,gDAAkD0F,ODsBnDtG,cACb,KACA+C,EAFa/C,CAGb4E,G,gBIjFK,SAAS2B,EACdC,EACAC,GAEA,OAAO,WAA8C,IAArC9D,EAAoC,uDAAzB6D,EAAcE,EAAW,uCAC5CC,EAAUF,EAASC,GAAUA,EAAOlF,MAC1C,OAAKmF,EAGEA,EAAQhE,EAAO+D,GAFb/D,GCKb,I,MAAMpC,GAAagG,GAAmC,GAAtB,mBAC7BlE,EAAyB,kBAAO,IADH,cAE7BA,EAAyB,kBAAO,IAFH,cAG7BA,EAAsB,kBAAM,IAHC,cAI7BA,EAA2B,kBAAM,IAJJ,IAO1B7B,GAAO+F,EAA6B,MAAhB,mBACvBlE,EAAyB,kBAAO,OADT,cAEvBA,EAAyB,kBAAO,OAFT,cAGvBA,EAAsB,kBAAM,OAHL,cAIvBA,EAA2B,SAACM,EAAO+D,GAAR,OAAiCA,EAAOjE,QAAQjC,OAJpD,IAOpBgC,GAAQ+D,EAA6B,MAAhB,mBACxBlE,EAAyB,kBAAO,OADR,cAExBA,EAAyB,kBAAO,OAFR,cAGxBA,EAAsB,kBAAM,OAHJ,cAIxBA,EAA2B,SAACM,EAAO+D,GAAR,OAAiCA,EAAOjE,QAAQD,QAJnD,IAOrBD,GAAKgE,EAA+B,MAAlB,mBACrBlE,EAAyB,kBAAO,OADX,cAErBA,EAAyB,kBAAO,OAFX,cAGrBA,EAAsB,kBAAM,OAHP,cAIrBA,EAA2B,SAACM,EAAO+D,GAAR,OAAiCA,EAAOjE,QAAQF,KAJtD,IASTqE,eAAgB,CAC7BrG,cACAC,QACAgC,SACAD,QCrCIiD,GAASe,EAA+B,MAAlB,qBJVA,0BIWE,kBAAM,OADR,eJRA,0BIUE,kBAAM,OAFR,eJPG,8BIUE,kBAAM,OAHX,eJTE,4BIaE,SAAC5D,EAAO+D,GAAR,OAAmCA,EAAOjE,QAAQ+C,SAJtD,KAOtBqB,GAAcN,GAAoC,GAAvB,qBJjBL,0BIkBE,kBAAM,IADH,eJfL,0BIiBE,kBAAM,IAFH,eJdF,8BIiBE,kBAAM,IAHN,eJhBH,4BIoBE,kBAAM,IAJL,KAOlBK,eAAgB,CAC7BpB,UACAqB,iB,UC1BF,qCAWA,IAAMC,GAAcF,YAAgB,CAElChE,MAAOmE,GACPC,UAAWC,KAIPC,GAAmBrH,OAAOsH,sCAAwCC,IAC3DC,GAAQC,YAAYR,GAAaI,GAAiBK,YAAgBC,QAE/EC,iBACE,kBAAC,IAAD,CAAUJ,MAAOA,IACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,W","file":"static/js/main.a5ecf904.chunk.js","sourcesContent":["import { FC, useEffect } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n// @ts-ignore - TODO: figure out why typescript doesn't like this\nconst ScrollToTop: FC<RouteComponentProps> = ({\n  children,\n  location: { pathname }\n}) => {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return children || null;\n};\n\nexport default withRouter(ScrollToTop);\n","import React, { FC } from 'react';\n\ninterface Props {\n\n}\n\nconst Canvas: FC<Props> = () => {\n  return (\n    <div>\n      <div>\n        <canvas></canvas>\n      </div>\n    </div>\n  );\n}\n\nexport default Canvas;\n","import { connect } from 'react-redux';\nimport Canvas from '../components/Canvas';\n\ninterface DispatchProps {\n\n}\n\nconst mapDispatchToProps: DispatchProps = {\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Canvas);\n","import React, { FC } from 'react';\nimport CanvasContainer from './CanvasContainer';\n\n\n\nconst CanvasPageContainer: FC = () => (\n  <CanvasContainer />\n);\n\nexport default CanvasPageContainer;\n","import React, { FC } from 'react';\n\nconst About: FC = () => (\n  <div className='about-page'>\n    Update the canvas one pixel at a time...\n  </div>\n);\n\nexport default About;\n","import React, { FC } from \"react\";\nimport { PageHeader, Button, Menu, Dropdown, Icon, Tag } from \"antd\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  isLoggedIn: boolean;\n  name?: string;\n  onLogin: () => void;\n  onLogout: () => void;\n}\n\n// TODO(Ryan): Should add a isLoggedIn prop, if they are then display user's name\nconst Header: FC<Props> = ({ onLogin, isLoggedIn, name, onLogout }) => {\n  //@ts-ignore\n  window.onGoogleScriptLoad = () => {\n    console.log(\"The google script has really loaded, cool!\");\n  };\n\n  const loginButton = isLoggedIn ? (\n    <>Hi, {name}</>\n  ) : (\n    <Button className=\"login-button\" onClick={onLogin}>\n      Login\n    </Button>\n  );\n\n  // TODO(ryan): add sign out functionality\n  const menu = (\n    <Menu>\n      <Menu.Item>\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      {isLoggedIn && <Menu.Item onClick={onLogout}>Sign Out</Menu.Item>}\n    </Menu>\n  );\n\n  const dropdownMenu = (\n    <Dropdown key=\"more\" overlay={menu}>\n      <Button\n        style={{\n          border: \"none\",\n          padding: 0\n        }}\n      >\n        <Icon\n          type=\"ellipsis\"\n          style={{\n            fontSize: 20,\n            verticalAlign: \"top\"\n          }}\n        />\n      </Button>\n    </Dropdown>\n  );\n\n  return (\n    <PageHeader\n      title=\"OwlPlace\"\n      subTitle=\"change the canvas one pixel at a time\"\n      tags={<Tag color=\"green\">COMP 413</Tag>}\n      extra={[loginButton, dropdownMenu]}\n    />\n  );\n};\n\nexport default Header;\n","export const LoginStart = 'login/LOGIN_START';\nexport const LoginSuccess = 'login/LOGIN_SUCCESS';\nexport const LoginError = 'login/LOGIN_ERROR';\nexport const SignOut = 'login/SIGN_OUT';\n","import * as ActionTypes from './actionTypes';\n\nconst loginStart = () => ({\n  type: ActionTypes.LoginStart\n});\nexport type LoginStart = ReturnType<typeof loginStart>;\n\nconst loginSuccess = (name: string, id: string, email: string) => ({\n  type: ActionTypes.LoginSuccess,\n  payload: {\n    name,\n    id,\n    email,\n  }\n});\nexport type LoginSuccess = ReturnType<typeof loginSuccess>;\n\nconst loginError = () => ({\n  type: ActionTypes.LoginError\n});\nexport type LoginError = ReturnType<typeof loginError>;\n\nexport const login = () => async dispatch => {\n  dispatch(loginStart());\n\n  /**\n   * The Sign-In client object.\n   */\n  let auth2: any;\n\n  const googleAPILoaded: Promise<void> = new Promise(resolve => {\n    gapi.load('auth2', () => {\n      /**\n       * Retrieve the singleton for the GoogleAuth library and set up the\n       * client.\n       */\n      auth2 = gapi.auth2.init({\n          client_id: '634069824484-ch6gklc2fevg9852aohe6sv2ctq7icbk.apps.googleusercontent.com'\n      });\n      resolve();\n    });\n  });\n\n  await googleAPILoaded;\n\n  await gapi.auth2.getAuthInstance().signIn();\n  const googleUser = gapi.auth2.getAuthInstance().currentUser.get();\n  const profile = googleUser.getBasicProfile();\n\n  dispatch(loginSuccess(profile.getName(), profile.getId(), profile.getEmail()));\n}\n\nexport const checkLogin = () => async dispatch => {\n  dispatch(loginStart());\n\n  /**\n  * The Sign-In client object.\n  */\n let auth2: any;\n\n  return new Promise(resolve => {\n    const timeout = setTimeout(() => Promise.resolve(), 3000);\n    const loadApi = () => new Promise(resolve => {\n      while (!window.gapi) {} \n      resolve()\n    });\n\n    Promise.race([timeout, loadApi]);\n    if (!window.gapi) {\n      return;\n    }\n\n    gapi.load('auth2', () => {\n     /**\n      * Retrieve the singleton for the GoogleAuth library and set up the\n      * client.\n      */\n     gapi.auth2.init({\n         client_id: '634069824484-ch6gklc2fevg9852aohe6sv2ctq7icbk.apps.googleusercontent.com'\n     }).then( function() {\n         // Sign in the user if they are currently signed in.\n         auth2 = gapi.auth2.getAuthInstance(); \n         if (auth2.isSignedIn.get()) {\n           const googleUser = gapi.auth2.getAuthInstance().currentUser.get();\n           const profile = googleUser.getBasicProfile();\n           dispatch(loginSuccess(profile.getName(), profile.getName(), profile.getEmail())); \n         }\n       }\n     );\n\n      resolve();\n   });\n });\n}\n\nconst signOutAction = () => ({\n  type: ActionTypes.SignOut\n});\nexport type SignOut = ReturnType<typeof signOutAction>;\n\nexport const signOut = () => async dispatch => {\n  const auth2 = gapi.auth2.getAuthInstance();\n  await auth2.signOut();\n  dispatch(signOutAction());\n}\n","import { State } from '../types';\n\nexport const getIsLoggedIn = (state: State): boolean => state.login.isLoggedIn;\nexport const getUserName = (state: State): string | undefined => state.login.name || undefined;\nexport const getUserId = (state: State): string | undefined => state.login.userId || undefined;\nexport const getUserEmail = (state: State): string | undefined => state.login.email || undefined;\n","import { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { login, signOut } from '../../login/actions';\nimport { getIsLoggedIn, getUserName } from '../../login/selectors';\n\ninterface DispatchProps {\n  onLogin: () => void;\n  onLogout: () => void;\n}\n\ninterface StateProps {\n  isLoggedIn: boolean;\n  name?: string;\n}\n\nconst mapDispatchToProps: DispatchProps = {\n  onLogin: login,\n  onLogout: signOut\n}\n\nconst mapStateToProps  = (state): StateProps => ({\n  isLoggedIn: getIsLoggedIn(state),\n  name: getUserName(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React from \"react\";\nimport \"./Footer.scss\";\n\nconst Footer: React.FC = () => {\n  return (\n    <div>\n      <footer>Made with &hearts; by COMP 413 @ Rice</footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { FC } from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\n\r\ninterface Props {}\r\n// http://casesandberg.github.io/react-color/\r\n\r\nconst ColorPicker: FC<Props> = ({}) => {\r\n  return <SketchPicker />;\r\n};\r\n\r\nexport default ColorPicker;\r\n","import React, { FC } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport ScrollToTop from \"./components/ScrollToTop\";\nimport CanvasPageContainer from \"./canvas/containers/CanvasPageContainer\";\nimport AboutPage from \"./about/components/About\";\nimport Header from \"./header/containers/HeaderContainer\";\nimport Footer from \"./footer/components/Footer\";\nimport ColorPicker from \"./colorPicker/colorPicker\";\n\nconst RoutingContainer: FC = () => (\n  <Router>\n    <ScrollToTop>\n      <Header />\n      <ColorPicker />\n      <Route exact path=\"/\" component={CanvasPageContainer} />\n      <Route path=\"/about\" component={AboutPage} />\n      <Footer />\n    </ScrollToTop>\n  </Router>\n);\n\nexport default RoutingContainer;\n","import React from \"react\";\nimport \"./App.scss\";\nimport RoutingContainer from './RoutingContainer';\nimport { connect } from 'react-redux';\nimport { checkLogin } from './login/actions';\nimport { openWebSocket } from './websocket/actions';\n\n// // updateMessage is type 1\n// const updateMessage = (\n//   id: string,\n//   x: number,\n//   y: number,\n//   r: number,\n//   g: number,\n//   b: number\n// ) => {\n//   return JSON.stringify({\n//     type: 1,\n//     userId: id,\n//     x: x,\n//     y: y,\n//     r: r,\n//     g: g,\n//     b: b\n//   });\n// };\n// const onClickP1 = (\n//   id: string,\n//   x: number,\n//   y: number,\n//   r: number,\n//   g: number,\n//   b: number\n// ) => {\n//   console.log(\"Sending update of Pixel 1\");\n//   socket.send(updateMessage(id, x, y, r, g, b));\n\n//   return true;\n// }\n\ninterface Props {\n  checkLogin: () => void;\n  openConnection: () => void;\n}\n\nclass App extends React.Component<Props> {\n\n  componentDidMount() {\n    this.props.checkLogin();\n    this.props.openConnection();\n  }\n  \n  render() {\n    return (\n      // <div>\n      //   <div className=\"top-nav-bar\">\n      //     <button className=\"login-btn\" onClick={onSignIn}>\n      //       <p className=\"login-text\">login</p>\n      //     </button>\n      //   </div>\n      //   <div className=\"main-wrapper\">\n      //     <h1>owlplaces</h1>\n      //     <h2>change the canvas one pixel at a time</h2>\n      //     <p>Click \"Pixel 1\" to send an update message to the server!\n      //       </p>\n      //       <button onClick = {() => onClickP1(\"user1\", 10, 400, 255, 255, 255)} id=\"p1\"> Pixel 1 </button>\n      //       {/* <button onClick= {onClickClose} id=\"close\">Close</button> */}\n      //   </div>\n      // </div>\n      <RoutingContainer />\n    );\n  }\n};\n\nconst mapDispatchToProps: Props = {\n  checkLogin: checkLogin,\n  openConnection: openWebSocket\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(App);\n","import { HOSTNAME } from '../constants';\nimport * as ActionTypes from './actionTypes';\nimport { getWebSocket } from './selectors';\n\nconst startConnect = () => ({\n  type: ActionTypes.StartConnect\n});\nexport type StartConnect =  ReturnType<typeof startConnect>;\n\nconst connectError = (error: string) => ({\n  type: ActionTypes.ConnectError,\n  payload: {\n    error\n  }\n});\nexport type ConnectError =  ReturnType<typeof connectError>;\n\nconst closeConnection = () => ({\n  type: ActionTypes.CloseConnection,\n});\nexport type CloseConnection =  ReturnType<typeof closeConnection>;\n\nconst connectSuccess = (socket: WebSocket) => ({\n  type: ActionTypes.ConnectSuccess,\n  payload: {\n    socket\n  }\n});\nexport type ConnectSuccess = ReturnType<typeof connectSuccess>;\n\nexport const openWebSocket = () => dispatch => {\n  dispatch(startConnect());\n\n  const socket = new WebSocket(`ws://${HOSTNAME}/ws`);\n    // open message is 0\n    socket.onopen = () => {\n      socket.send(\n        JSON.stringify({\n          type: 0,\n          message: \"Hi From the Client! The websocket just opened\"\n        })\n      );\n    dispatch(connectSuccess(socket));\n  };\n\n  // close message is 9\n  socket.onclose = event => {\n    dispatch(closeConnection());\n  };\n\n  socket.onerror = error => {\n    dispatch(connectError(error.type));\n  };\n\n  socket.onmessage = event => {\n    const { data } = event;\n    // TODO (Ryan): figure out the best way to handle this... probably need to write some middlewear\n    console.log(\"Recieved a message from the server, message: \" + data);\n  };\n}\n\nexport const closeWebSocket = () => (dispatch, getState) => {\n  const socket = getWebSocket(getState());\n  if (socket) {\n    socket.send(\n      JSON.stringify({\n        type: 9,\n        message: \"Client Closed!\"\n      })\n    );\n  }\n  dispatch(closeConnection());\n}\n\n// TODO (ryan): create action send different message types\n","export const StartConnect = 'websocket/START_CONNECT';\nexport const ConnectSuccess = 'websocket/CONNECT_SUCCESS';\nexport const ConnectError = 'websocket/CONNECT_ERROR';\nexport const CloseConnection = 'websocket/CLOSE_CONNNECTION';\n","export const HOSTNAME = '127.0.0.1:3010';\n","// TODO (ryan): add stricter typing to handlers\nexport function createReducer<T>(\n  initialState: T,\n  handlers\n) {\n  return function(state: T = initialState, action): T {\n    const handler = handlers[action && action.type];\n    if (!handler) {\n      return state;\n    }\n    return handler(state, action);\n  };\n}\n","import { createReducer } from '../createReducer';\nimport * as ActionTypes from './actionTypes';\nimport { combineReducers } from 'redux';\nimport { LoginSuccess } from './actions';\n\n\nexport interface State {\n  isLoggedIn: boolean;\n  name: string | null;\n  email: string | null;\n  userId: string | null;\n}\n\nconst isLoggedIn = createReducer<State['isLoggedIn']>(false, {\n  [ActionTypes.LoginStart]: () =>  false,\n  [ActionTypes.LoginError]: () =>  false,\n  [ActionTypes.SignOut]: () => false,\n  [ActionTypes.LoginSuccess]: () => true,\n});\n\nconst name = createReducer<State['name']>(null, {\n  [ActionTypes.LoginStart]: () =>  null,\n  [ActionTypes.LoginError]: () =>  null,\n  [ActionTypes.SignOut]: () => null,\n  [ActionTypes.LoginSuccess]: (state, action: LoginSuccess) => action.payload.name,\n});\n\nconst email = createReducer<State['name']>(null, {\n  [ActionTypes.LoginStart]: () =>  null,\n  [ActionTypes.LoginError]: () =>  null,\n  [ActionTypes.SignOut]: () => null,\n  [ActionTypes.LoginSuccess]: (state, action: LoginSuccess) => action.payload.email,\n});\n\nconst id = createReducer<State['userId']>(null, {\n  [ActionTypes.LoginStart]: () =>  null,\n  [ActionTypes.LoginError]: () =>  null,\n  [ActionTypes.SignOut]: () => null,\n  [ActionTypes.LoginSuccess]: (state, action: LoginSuccess) => action.payload.id,\n});\n\n\n\nexport default combineReducers({\n  isLoggedIn,\n  name,\n  email,\n  id,\n});\n","import { createReducer } from '../createReducer';\nimport * as ActionTypes from './actionTypes';\nimport { ConnectSuccess } from './actions';\nimport { combineReducers } from 'redux';\n \nexport interface State {\n  socket: WebSocket | null;\n  isConnected: boolean;\n}\n\nconst socket = createReducer<State['socket']>(null, {\n  [ActionTypes.StartConnect]: () => null,\n  [ActionTypes.ConnectError]: () => null,\n  [ActionTypes.CloseConnection]: () => null,\n  [ActionTypes.ConnectSuccess]: (state, action: ConnectSuccess) => action.payload.socket,\n});\n\nconst isConnected = createReducer<State['isConnected']>(false, {\n  [ActionTypes.StartConnect]: () => false,\n  [ActionTypes.ConnectError]: () => false,\n  [ActionTypes.CloseConnection]: () => false,\n  [ActionTypes.ConnectSuccess]: () => true,\n});\n\nexport default combineReducers({\n  socket,\n  isConnected\n})\n","import React from 'react';\nimport { render } from 'react-dom'\nimport './index.scss';\nimport App from './App';\nimport { combineReducers, createStore, applyMiddleware, compose } from 'redux';\n// import canvasReducers from './canvas/reducers';\nimport loginReducers from './login/reducers';\nimport webSocketReducers from './websocket/reducers';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n  // canvas: canvasReducers,\n  login: loginReducers,\n  websocket: webSocketReducers,\n});\n\n// @ts-ignore - redux devtools doesn't have type definitions\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}