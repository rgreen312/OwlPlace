{"version":3,"sources":["components/ScrollToTop.tsx","canvas/components/Canvas.tsx","canvas/containers/CanvasContainer.tsx","canvas/actions.ts","canvas/actionTypes.ts","canvas/containers/CanvasPageContainer.tsx","about/components/About.tsx","header/components/Header.tsx","login/actionTypes.ts","login/selectors.ts","header/containers/HeaderContainer.tsx","login/actions.ts","footer/components/Footer.tsx","RoutingContainer.tsx","App.tsx","createReducer.ts","login/reducers.ts","index.tsx"],"names":["withRouter","children","pathname","location","useEffect","window","scrollTo","Canvas","onClick","mapDispatchToProps","dispatch","getState","console","log","type","payload","data","connect","CanvasPageContainer","CanvasContainer","About","className","Header","onLogin","isLoggedIn","name","loginButton","menu","Item","to","dropdownMenu","key","overlay","style","border","padding","fontSize","verticalAlign","title","extra","LoginStart","LoginSuccess","LoginError","getIsLoggedIn","state","login","getUserName","undefined","a","ActionTypes","googleAPILoaded","Promise","resolve","gapi","load","auth2","init","client_id","getAuthInstance","signIn","googleUser","currentUser","get","profile","getBasicProfile","getName","id","getId","email","getEmail","Footer","RoutingContainer","exact","path","component","AboutPage","socket","WebSocket","onopen","send","JSON","stringify","message","onclose","event","onerror","error","onmessage","App","createReducer","initialState","handlers","action","handler","combineReducers","rootReducer","loginReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.c908c699.chunk.js","sourcesContent":["import { FC, useEffect } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\n// @ts-ignore - TODO: figure out why typescript doesn't like this\nconst ScrollToTop: FC<RouteComponentProps> = ({\n  children,\n  location: { pathname }\n}) => {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return children || null;\n};\n\nexport default withRouter(ScrollToTop);\n","import React, { FC } from 'react';\n\ninterface Props {\n  onClick: () => void;\n}\n\nconst Canvas: FC<Props> = ({ onClick }) => {\n  return (\n    <div>\n      <div>\n        <canvas></canvas>\n      </div>\n    </div>\n  );\n}\n\nexport default Canvas;\n","import { connect } from 'react-redux';\nimport Canvas from '../components/Canvas';\nimport { testAction } from '../actions';\n\ninterface DispatchProps {\n  onClick: () => void;\n}\n\nconst mapDispatchToProps: DispatchProps = {\n  onClick: testAction\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Canvas);\n","// import { FETCH_IMAGE_ENDPOINT } from './constants';\n// import { HOSTNAME } from '../constants';\nimport { Color } from './types';\nimport * as ActionTypes from './actionTypes';\n\nconst fetchImageDataStart = () => ({\n  type: ActionTypes.FetchImageStart\n});\n\nexport type FetchImageDataStart = ReturnType<typeof fetchImageDataStart>;\n\nexport const fetchImageData = () => (dispatch) => {\n  dispatch(fetchImageDataStart());\n  \n}\n\n\nexport const updatePixel = (newColor: Color, x: number, y: number) => {\n\n}\n\n\nconst testActionType = (data: string) => ({\n  type: ActionTypes.FetchImageStart,\n  payload:{ data }\n});\nexport type TestActionType = ReturnType<typeof testActionType>;\n\nexport const testAction = () => (dispatch, getState) => {\n  console.log('dispatching action');\n  dispatch(testActionType('testing'));\n}\n","export const FetchImageStart = 'canvas/FETCH_IMAGE_START';\nexport const FetchImageSuccess = 'canvas/FETCH_IMAGE_SUCCESS';\nexport const FetchImageError = 'canvas/FETCH_IMAGE_ERROR';\nexport const UpdatePixelStart = 'canvas/UPDATE_PIXEL_START';\nexport const UpdatePixelSuccess = 'canvas/UPDATE_PIXEL_SUCCESS';\nexport const UpdatePixelError = 'canvas/UPDATE_PIXEL_ERROR';\n","import React, { FC } from 'react';\nimport CanvasContainer from './CanvasContainer';\n\n\n\nconst CanvasPageContainer: FC = () => (\n  <CanvasContainer />\n);\n\nexport default CanvasPageContainer;\n","import React, { FC } from 'react';\n\nconst About: FC = () => (\n  <div className='about-page'>\n    Update the canvas one pixel at a time...\n  </div>\n);\n\nexport default About;\n","import React, { FC } from 'react';\nimport { PageHeader, Button, Menu, Dropdown, Icon } from 'antd';\nimport { Link } from 'react-router-dom';\n\ninterface Props {\n  onLogin: () => void;\n  isLoggedIn: boolean;\n  name?: string;\n}\n\n// TODO(Ryan): Should add a isLoggedIn prop, if they are then display user's name\nconst Header: FC<Props> = ({ onLogin, isLoggedIn, name }) => {\n\n  const loginButton = isLoggedIn\n  ? (\n    <>\n      Hi, {name}\n    </>\n  ) : (\n    <Button className='login-button' onClick={onLogin}>\n      Login\n    </Button>\n  );\n\n  // TODO(ryan): add sign out functionality\n  const menu = (\n    <Menu>\n      <Menu.Item>\n        <Link to='/about'>About</Link>\n      </Menu.Item>\n      {isLoggedIn && (\n        <Menu.Item>\n          <button onClick={() => {}}>Sign out</button>\n        </Menu.Item>\n      )}\n    </Menu>\n  );\n\n  const dropdownMenu = (\n    <Dropdown key=\"more\" overlay={menu}>\n      <Button\n        style={{\n          border: 'none',\n          padding: 0,\n        }}\n      >\n        <Icon\n          type=\"ellipsis\"\n          style={{\n            fontSize: 20,\n            verticalAlign: 'top',\n          }}\n        />\n      </Button>\n    </Dropdown>\n  );\n\n  return (\n    <PageHeader\n      title='OwlPlace'\n      extra={[loginButton, dropdownMenu]}\n    />\n  )\n}\n\nexport default Header;\n","export const LoginStart = 'login/LOGIN_START';\nexport const LoginSuccess = 'login/LOGIN_SUCCESS';\nexport const LoginError = 'login/LOGIN_ERROR';\n","import { State } from '../types';\n\nexport const getIsLoggedIn = (state: State): boolean => state.login.isLoggedIn;\nexport const getUserName = (state: State): string | undefined => state.login.name || undefined;\nexport const getUserId = (state: State): string | undefined => state.login.userId || undefined;\nexport const getUserEmail = (state: State): string | undefined => state.login.email || undefined;\n","import { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { login } from '../../login/actions';\nimport { getIsLoggedIn, getUserName } from '../../login/selectors';\n\ninterface DispatchProps {\n  onLogin: () => void;\n}\n\ninterface StateProps {\n  isLoggedIn: boolean;\n  name?: string;\n}\n\nconst mapDispatchToProps: DispatchProps = {\n  onLogin: login\n}\n\nconst mapStateToProps  = (state): StateProps => ({\n  isLoggedIn: getIsLoggedIn(state),\n  name: getUserName(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import * as ActionTypes from './actionTypes';\n\nconst loginStart = () => ({\n  type: ActionTypes.LoginStart\n});\nexport type LoginStart = ReturnType<typeof loginStart>;\n\nconst loginSuccess = (name: string, id: string, email: string) => ({\n  type: ActionTypes.LoginSuccess,\n  payload: {\n    name,\n    id,\n    email,\n  }\n});\nexport type LoginSuccess = ReturnType<typeof loginSuccess>;\n\nconst loginError = () => ({\n  type: ActionTypes.LoginError\n});\nexport type LoginError = ReturnType<typeof loginError>;\n\nexport const login = () => async dispatch => {\n  dispatch(loginStart());\n\n  /**\n   * The Sign-In client object.\n   */\n  let auth2: any;\n\n  const googleAPILoaded: Promise<void> = new Promise(resolve => {\n    gapi.load('auth2', () => {\n      /**\n       * Retrieve the singleton for the GoogleAuth library and set up the\n       * client.\n       */\n      auth2 = gapi.auth2.init({\n          client_id: '634069824484-ch6gklc2fevg9852aohe6sv2ctq7icbk.apps.googleusercontent.com'\n      });\n      resolve();\n    });\n  });\n\n  await googleAPILoaded;\n\n  await gapi.auth2.getAuthInstance().signIn();\n  const googleUser = gapi.auth2.getAuthInstance().currentUser.get();\n  const profile = googleUser.getBasicProfile();\n\n  dispatch(loginSuccess(profile.getName(), profile.getId(), profile.getEmail()));\n}\n","import React from \"react\";\nimport \"./Footer.scss\";\n\nconst Footer: React.FC = () => {\n  return (\n    <div>\n      <footer>Made with &hearts; by COMP 413 @ Rice</footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { FC } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport ScrollToTop from './components/ScrollToTop';\nimport CanvasPageContainer from './canvas/containers/CanvasPageContainer';\nimport AboutPage from './about/components/About';\nimport Header from './header/containers/HeaderContainer';\nimport Footer from './footer/components/Footer';\n\nconst RoutingContainer: FC = () => (\n  <Router>\n    <ScrollToTop>\n      <Header />\n      <Route exact path=\"/\" component={CanvasPageContainer} />\n      <Route path='/about' component={AboutPage} />\n      <Footer />\n    </ScrollToTop>\n  </Router>\n);\n\n\nexport default RoutingContainer;\n","import React, { FC } from \"react\";\nimport \"./App.scss\";\nimport RoutingContainer from './RoutingContainer';\n\nlet socket = new WebSocket(\"ws://127.0.0.1:3010/ws\");\nconsole.log(\"Attempting Connection...\");\n\n// open message is 0\nsocket.onopen = () => {\n  console.log(\"Successfully Connected\");\n  socket.send(\n    JSON.stringify({\n      type: 0,\n      message: \"Hi From the Client! The websocket just opened\"\n    })\n  );\n};\n\n// close message is 9\nsocket.onclose = event => {\n  console.log(\"Socket Closed Connection: \", event);\n  socket.send(\n    JSON.stringify({\n      type: 9,\n      message: \"Client Closed!\"\n    })\n  );\n};\n\nsocket.onerror = error => {\n  console.log(\"Socket Error: \", error);\n};\n\nsocket.onmessage = event => {\n  var message = event.data;\n  console.log(\"Recieved a message from the server, message: \" + message);\n};\n\n// updateMessage is type 1\nconst updateMessage = (\n  id: string,\n  x: number,\n  y: number,\n  r: number,\n  g: number,\n  b: number\n) => {\n  return JSON.stringify({\n    type: 1,\n    userId: id,\n    x: x,\n    y: y,\n    r: r,\n    g: g,\n    b: b\n  });\n};\nconst onClickP1 = (\n  id: string,\n  x: number,\n  y: number,\n  r: number,\n  g: number,\n  b: number\n) => {\n  console.log(\"Sending update of Pixel 1\");\n  socket.send(updateMessage(id, x, y, r, g, b));\n\n  return true;\n}\n\n\nconst App: FC = () => {\n  return (\n    // <div>\n    //   <div className=\"top-nav-bar\">\n    //     <button className=\"login-btn\" onClick={onSignIn}>\n    //       <p className=\"login-text\">login</p>\n    //     </button>\n    //   </div>\n    //   <div className=\"main-wrapper\">\n    //     <h1>owlplaces</h1>\n    //     <h2>change the canvas one pixel at a time</h2>\n    //     <p>Click \"Pixel 1\" to send an update message to the server!\n    //       </p>\n    //       <button onClick = {() => onClickP1(\"user1\", 10, 400, 255, 255, 255)} id=\"p1\"> Pixel 1 </button>\n    //       {/* <button onClick= {onClickClose} id=\"close\">Close</button> */}\n    //   </div>\n    // </div>\n    <RoutingContainer />\n  );\n};\n\nexport default App;\n","// TODO (ryan): add stricter typing to handlers\nexport function createReducer<T>(\n  initialState: T,\n  handlers\n) {\n  return function(state: T = initialState, action): T {\n    const handler = handlers[action && action.type];\n    if (!handler) {\n      return state;\n    }\n    return handler(state, action);\n  };\n}\n","import { createReducer } from '../createReducer';\nimport * as ActionTypes from './actionTypes';\nimport { combineReducers } from 'redux';\nimport { LoginSuccess } from './actions';\n\n\nexport interface State {\n  isLoggedIn: boolean;\n  name: string | null;\n  email: string | null;\n  userId: string | null;\n}\n\nconst isLoggedIn = createReducer<State['isLoggedIn']>(false, {\n  [ActionTypes.LoginStart]: () =>  false,\n  [ActionTypes.LoginError]: () =>  false,\n  [ActionTypes.LoginSuccess]: () => true,\n});\n\nconst name = createReducer<State['name']>(null, {\n  [ActionTypes.LoginStart]: () =>  null,\n  [ActionTypes.LoginError]: () =>  null,\n  [ActionTypes.LoginSuccess]: (state, action: LoginSuccess) => action.payload.name,\n});\n\nconst email = createReducer<State['name']>(null, {\n  [ActionTypes.LoginStart]: () =>  null,\n  [ActionTypes.LoginError]: () =>  null,\n  [ActionTypes.LoginSuccess]: (state, action: LoginSuccess) => action.payload.email,\n});\n\nconst id = createReducer<State['userId']>(null, {\n  [ActionTypes.LoginStart]: () =>  null,\n  [ActionTypes.LoginError]: () =>  null,\n  [ActionTypes.LoginSuccess]: (state, action: LoginSuccess) => action.payload.id,\n});\n\n\n\nexport default combineReducers({\n  isLoggedIn,\n  name,\n  email,\n  id,\n});\n","import React from 'react';\nimport { render } from 'react-dom'\nimport './index.scss';\nimport App from './App';\nimport { combineReducers, createStore, applyMiddleware, compose } from 'redux';\nimport canvasReducers from './canvas/reducers';\nimport loginReducers from './login/reducers';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n  // canvas: canvasReducers,\n  login: loginReducers\n});\n\n// @ts-ignore - redux devtools doesn't have type definitions\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}